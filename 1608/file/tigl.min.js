"use strict";

// tigl by chromako.de
(function () {
  var t = [[537027, -560249], [525689, -560616], [526077, -560616], [526164, -559291], [531494, -559530], [531903, -559554], [532170, -560864], [555130, -562404], [503224, -552394], [503522, -551049], [542481, -560037], [542706, -559642], [550773, -560041], [553076, -567112], [553103, -567151], [553132, -567183], [553173, -565356], [553208, -567184], [553288, -567149], [553329, -567108], [554243, -565849], [554243, -565780], [557912, -558137], [526693, -560208], [526995, -559135], [527086, -559782], [528028, -561056], [528198, -560225], [527061, -557254], [483600, -551975], [483667, -551977], [553345, -563807], [519636, -549096], [522049, -553195], [490124, -554986], [552820, -560057], [520607, -549047], [521392, -549021], [538150, -550895], [560567, -549975], [528618, -549429], [553737, -550104], [529664, -558476], [556369, -556826], [523458, -549103], [548206, -561787], [548271, -561787], [542941, -562344], [475207, -553683], [475257, -553684], [475313, -553684], [475367, -553680], [518169, -560337], [519089, -561130], [519929, -559544], [525306, -561659], [535582, -561307], [535875, -562506], [535900, -563088], [534153, -559619], [508250, -567578], [551586, -563946], [552593, -563797], [486608, -554809], [516591, -560321], [517846, -559181], [517968, -559859], [518041, -561062], [548482, -549800], [546744, -559592], [567063, -550422], [567065, -550503], [567086, -550464], [567086, -550540], [567111, -550503], [567111, -550422], [567130, -550540], [567134, -550464], [567152, -550503], [567154, -550422], [539260, -562964], [540037, -562347], [540302, -562977], [540380, -562347], [558132, -563858], [507154, -568861], [541755, -563024], [542595, -562588], [542595, -562506], [518682, -551658], [519441, -552229], [530791, -558938], [531482, -558698], [479534, -554932], [501990, -549107], [481857, -554526], [482009, -554496], [539605, -558914], [542768, -564500], [543822, -563314], [544521, -564725], [544620, -563890], [512082, -549750], [512093, -549901], [512099, -550062], [512207, -549881], [512209, -550222], [512217, -549740], [512223, -549647], [512258, -549740], [512272, -550041], [512296, -549739], [512323, -549883], [512348, -550214], [512349, -549642], [512385, -549886], [512396, -549601], [512414, -550061], [512417, -549788], [549232, -565175], [549831, -563260], [550487, -564557], [477754, -554489], [522741, -551458], [497597, -551742], [525583, -549247], [547911, -560431], [492147, -553606], [556845, -567091], [523816, -560628], [524078, -560628], [524079, -560382], [552105, -568488], [527039, -549219], [528075, -549711], [537789, -558007], [539524, -559910], [540329, -560393], [483549, -549417], [485094, -549147], [551295, -565285], [551501, -566387], [551546, -566765], [552221, -566176], [523748, -561433], [523778, -561435], [523810, -561437], [547918, -555114], [548026, -556862], [541735, -559053], [541844, -557595], [542018, -558003], [542611, -557542], [541203, -563852], [541641, -563852], [542076, -563852], [545090, -561997], [545524, -562339], [546312, -562840], [546312, -562732], [546600, -562845], [546607, -562732], [513108, -560669], [513738, -559677], [549508, -558811], [549843, -558016], [550152, -558016], [528673, -559748], [529300, -560287]];

  function e(t, e, i, s, a, l, o, r) {
    return i > a && t < o && s > l && e < r;
  }

  function i(t, e) {
    this.el = t;
    this.box = t.getBoundingClientRect();
    this.opts = e || {};
    this.pos = {
      x: e.startPos.x,
      y: e.startPos.y
    };
    this.layer = {};
    this.reset();
  }

  i.prototype = {
    reset: function reset() {
      var t = this.layer;
      t.bounds = {};
      t.tiles = {};
      t.tileCache = new Array(this.opts.tileCacheSize);
      t.tileCacheIdx = 0;
      t.tilesLoading = 0;
      this._onLoaded = null;

      while (this.el.lastChild) {
        this.el.removeChild(this.el.lastChild);
      }
    },
    frame: function frame() {
      var t = this.box;
      var i = this.opts.size;
      var s = i - this.opts.overlap;
      var a = this.opts.preloadDistance;
      var l = this.layer;
      var o = l.tiles;
      var r = this.pos.x;
      var n = this.pos.y;
      var h = Math.floor((r - a) / s);
      var d = Math.floor((r + t.width + a) / s);
      var v = Math.floor((n - a) / s);
      var c = Math.floor((n + t.height + a) / s);
      var f = l.bounds;
      var p = f.xt1 != null ? Math.min(h, f.xt1) : h;
      var u = f.xt2 != null ? Math.max(d, f.xt2) : d;
      var y = f.yt1 != null ? Math.min(v, f.yt1) : v;
      var g = f.yt2 != null ? Math.max(c, f.yt2) : c;

      for (var x = p; x <= u; x++) {
        for (var m = y; m <= g; m++) {
          var b = this.opts.key(x, m);
          var w = o[b];
          var M = x * s - r;
          var k = m * s - n;
          var E = e(M, k, M + i, k + i, -a, -a, t.width + a, t.height + a);

          if (E && !w) {
            w = o[b] = this._makeTile(b, l);
            var C;

            for (var _ = 0; _ < this.opts.tileCacheSize; _++) {
              C = l.tileCache[l.tileCacheIdx];

              if (!C || !o[C] || o[C].style.display == "none") {
                break;
              }
            }

            if (_ == this.opts.tileCacheSize) {
              console.error("tile cache too small! evicting visible tile");
            }

            if (C) {
              if (o[C].parentNode) {
                o[C].parentNode.removeChild(o[C]);
              }

              delete o[C];
            }

            l.tileCache[l.tileCacheIdx] = b;
            l.tileCacheIdx = (l.tileCacheIdx + 1) % this.opts.tileCacheSize;

            if (!w.complete) {
              w.addEventListener("load", this.onTileLoad.bind(this, b, x, m));
              w.addEventListener("error", this.onTileLoad.bind(this, b, x, m));
              l.tilesLoading++;
            }
          }

          var T = !e(M, k, M + i, k + i, 0, 0, t.width, t.height);

          if (T) {
            if (w && w.parentNode) {
              w.parentNode.removeChild(w);
            }
          } else if (w) {
            if (!w.parentNode) {
              this.el.appendChild(w);
            }

            w.style.transform = "translate3d(" + M + "px, " + k + "px, 0)";
          }
        }

        l.bounds.xt1 = h;
        l.bounds.xt2 = d;
        l.bounds.yt1 = v;
        l.bounds.yt2 = c;
      }
    },
    onTileLoad: function onTileLoad(t, e, i, s) {
      if (s.type == "error") {
        if (this.opts.tileFallback) {
          var a = this.layer.tiles;
          var l = a[t];
          var o = this.opts.tileFallback(a[t], t, e, i);
          o.style.position = "absolute";
          o.style.width = l.style.width + "px";
          o.style.height = l.style.height + "px";
          o.style.transform = l.style.transform;
          o.setAttribute("data-key", t);
          a[t] = o;

          if (l.parentNode) {
            this.el.removeChild(l);
          }

          this.el.appendChild(o);
        } else {
          s.target.style.display = "none";
        }
      }

      this.layer.tilesLoading--;

      if (this.layer.tilesLoading == 0 && this._onLoaded) {
        this._onLoaded();
      }
    },
    whenLoaded: function whenLoaded(t) {
      if (this.layer.tilesLoading == 0) {
        t();
      } else {
        this._onLoaded = function () {
          this._onLoaded = null;
          t();
        }.bind(this);
      }
    },
    _makeTile: function _makeTile(t, e) {
      var i = this.opts.debug ? document.createElement("div") : new Image();
      i.style.width = this.opts.size + "px";
      i.style.height = this.opts.size + "px";
      i.style.position = "absolute";
      i.style.left = 0;
      i.style.right = 0;
      i.src = this.opts.url(t);
      i.setAttribute("data-key", t);

      if (this.opts.debug) {
        i.style.background = "hsla(" + Math.floor(Math.random() * 256) + ", 80%, 50%, .25)";
        i.style.outline = "1px solid black";
        i.style.lineHeight = this.opts.size + "px";
        i.style.textAlign = "center";
      }

      return i;
    },
    renderToCanvas: function renderToCanvas(t, e, i, s, a) {
      var l = t.getContext("2d");
      var o = s - e;
      var r = a - i;
      var n = this.opts.size;
      var h = n - this.opts.overlap;
      var d = this.layer;
      var v = d.tiles;
      var c = e;
      var f = i;
      var p = Math.floor(c / h);
      var u = Math.floor((c + o) / h);
      var y = Math.floor(f / h);
      var g = Math.floor((f + r) / h);

      for (var x = p; x <= u; x++) {
        for (var m = y; m <= g; m++) {
          var b = this.opts.key(x, m);
          var w = v[b];

          if (!w) {
            continue;
          }

          var M = x * h;
          var k = m * h;
          var E = e - M;
          var C = i - k;
          var _ = 0;
          var T = 0;

          if (E < 0) {
            _ = -E;
            E = 0;
          }

          if (C < 0) {
            T = -C;
            C = 0;
          }

          var L = Math.min(M + n, s) - Math.max(M, e);
          var I = Math.min(k + n, a) - Math.max(k, i);

          if (w.hasAttribute("data-collide")) {
            l.fillStyle = "black";
            l.fillRect(_, T, L, I);
          } else {
            try {
              l.drawImage(w, E, C, L, I, _, T, L, I);
            } catch (S) {}
          }
        }
      }
    }
  };

  function s(t, e) {
    this.el = t;
    this.opts = e;
    this.el.style.position = "relative";
    this.el.style.overflow = "hidden";
    this.tiglEl = document.createElement("div");
    this.tiglEl.setAttribute("style", "position: absolute; left: 0; top: 0; right: 0; bottom: 0");
    t.appendChild(this.tiglEl);
    this.canvas = document.createElement("canvas");
    this.ctx = this.canvas.getContext("2d");
    var s = e.character;
    this.canvas.width = s.width + 2 * e.maxSpeed - s.x1Margin - s.x2Margin;
    this.canvas.height = s.height + 2 * e.maxSpeed - s.y1Margin - s.y2Margin;
    this._keyState = {
      left: false,
      right: false,
      up: false,
      down: false,
      lastUp: false,
      baseGamma: null
    };
    this._frameQueued = false;
    this.pos = {
      x: e.startPos.x,
      y: e.startPos.y,
      xv: 0,
      yv: e.gravity,
      dir: 1
    };
    this._collisions = {
      left: null,
      right: null,
      up: null,
      down: null
    };
    this.objects = [];

    for (var a = 0; a < e.objects.length; a++) {
      var l = e.objects[a];
      var o = {
        w: l.w,
        h: l.h,
        backgroundImage: l.backgroundImage
      };
      var r = Math.ceil(l.w / 2);
      var n = Math.ceil(l.h / 2);
      o.x1 = l.x - r;
      o.x2 = l.x + r;
      o.y1 = l.y - n;
      o.y2 = l.y + n;
      o.got = false;
      this.objects.push(o);
    }

    this.objectEls = {};
    e.tigl.startPos = e.startPos;
    this.tigl = new i(this.tiglEl, e.tigl);
    this.charEl = document.createElement("div");
    this.charEl.className = "self";
    this.charEl.style.position = "absolute";
    this.charEl.style.zIndex = 100;
    this.charEl.style.left = Math.floor(this.tigl.box.width / 2 - s.width / 2) + "px";
    this.charEl.style.top = Math.floor(this.tigl.box.height / 2 - s.height / 2) + "px";
    this.charEl.style.width = s.width + "px";
    this.charEl.style.height = s.height + "px";
    t.appendChild(this.charEl);
    this.ready = false;
    var h = e.tigl.preloadDistance;
    this.tigl.opts.preloadDistance = 0;
    this.frame();
    this.tigl.whenLoaded(function () {
      this.ready = true;
      this.tigl.opts.preloadDistance = h;
      this.startTicking();
    }.bind(this));
    t.tabIndex = 0;
    t.addEventListener("keydown", this.onKey.bind(this), false);
    t.addEventListener("keyup", this.onKey.bind(this), false);
    t.addEventListener("touchstart", this.onTouch.bind(this), false);
    t.addEventListener("mousemove", this.onMouseMove.bind(this), false);

    if (window.DeviceOrientationEvent) {
      window.addEventListener("deviceorientation", this.onOrient.bind(this), false);
    }
  }

  s.prototype = {
    _updateCollision: function _updateCollision() {
      var t = this.pos;
      var i = this.opts.character;
      var s = i.width / 2;
      var a = i.height / 2;
      var l = t.x - s + i.x1Margin;
      var o = t.x + s - i.y2Margin;
      var r = t.y - a + i.y1Margin;
      var n = t.y + a - i.y2Margin;

      for (var h = 0; h < this.objects.length; h++) {
        var d = this.objects[h];
        var v = e(d.x1, d.y1, d.x2, d.y2, l, r, o, n);
        d.got = d.got || v;
      }

      var c = this.canvas.width;
      var f = this.canvas.height;
      this.ctx.fillStyle = "white";
      this.ctx.fillRect(0, 0, c, f);
      var p = this.opts.maxSpeed;
      var u = Math.floor(l - p);
      var y = Math.floor(o + p);
      var g = Math.floor(r - p);
      var x = Math.floor(n + p);
      this.tigl.renderToCanvas(this.canvas, u, g, y, x);
      var m = this.ctx.getImageData(0, 0, c, f);
      var b = this._collisions;
      var w = null;
      var M = null;
      var k = null;
      var E = null;
      var C = null;
      var _ = null;

      if (!this.opts.disableCollision) {
        for (var T = 0; T < c; T++) {
          for (var L = 0; L < f; L++) {
            var I = T < p;
            var S = T >= c - p;
            var z = L < p;
            var j = L >= f - p;

            if (!I && !S && !z && !j) {
              continue;
            }

            var A = 4 * (T + c * L);
            var R = m.data[A];

            if (R < 100 && !(R & 1)) {
              if (!z && !j) {
                if (I) {
                  if (w == null || T > w) {
                    w = T;
                    M = L;
                  } else if (T == w && L > M) {
                    M = L;
                  }
                } else if (S) {
                  if (k == null || T < k) {
                    k = T;
                    E = L;
                  } else if (T == k && L > E) {
                    E = L;
                  }
                }
              } else if (!I && !S) {
                if (z) {
                  if (C == null || L > C) {
                    C = L;
                  }
                } else if (j) {
                  if (_ == null || L < _) {
                    _ = L;
                  }
                }
              }
            }

            if (this.opts.debug && R & 1) {
              m.data[A] = 255;
            }
          }
        }
      }

      b.left = w == null ? null : p - w - 1;
      b.leftTop = M == null ? null : f - p - M;
      b.right = k == null ? null : k - (c - p);
      b.rightTop = E == null ? null : f - p - E;
      b.up = C == null ? null : p - C - 1;
      b.down = _ == null ? null : _ - (f - p);

      if (this.opts.debug) {
        this.ctx.putImageData(m, 0, 0);
        this.ctx.fillStyle = "rgba(0, 0, 0, .35)";
        this.ctx.fillRect(0, 0, p, f);
        this.ctx.fillRect(c - p, 0, p, f);
        this.ctx.fillRect(0, 0, c, p);
        this.ctx.fillRect(0, f - p, c, p);
        this.ctx.fillStyle = "cyan";

        if (b.left != null) {
          this.ctx.fillRect(p - b.left, p, 1, f - 2 * p);
        }

        if (b.right != null) {
          this.ctx.fillRect(c - p + b.right, p, 1, f - 2 * p);
        }

        if (b.up != null) {
          this.ctx.fillRect(p, p - b.up, c - 2 * p, 1);
        }

        if (b.down != null) {
          this.ctx.fillRect(p, f - p + b.down, c - 2 * p, 1);
        }
      }
    },
    onKey: function onKey(t) {
      var e = this._keyState;
      var i = t.type == "keydown";
      var s = true;

      switch (t.which) {
        case 37:
        case 65:
        case 72:
          e.left = i;
          break;

        case 38:
        case 87:
        case 75:
          e.up = i;
          break;

        case 39:
        case 68:
        case 76:
          e.right = i;
          break;

        case 40:
        case 83:
        case 74:
          e.down = i;
          break;

        default:
          s = false;
      }

      if (s) {
        t.preventDefault();

        if (!this._frameQueued) {
          this._frameQueued = requestAnimationFrame(this.tick.bind(this));
        }
      }
    },
    onOrient: function onOrient(t) {
      var e = this._keyState;

      if (e.baseGamma == null) {
        e.baseGamma = t.gamma;
      }

      var i = t.gamma - e.baseGamma;
      var s = 5;
      var a = s * 2.5;
      e.left = i <= -s;
      e.right = i >= s;

      if (i <= -a) {
        e.baseGamma = t.gamma + a;
      } else if (i >= a) {
        e.baseGamma = t.gamma - a;
      }

      if (e.left || e.right || e.up || e.down) {
        this.startTicking();
      }
    },
    onTouch: function onTouch(t) {
      var e = this._keyState;
      e.lastUp = false;
      e.up = true;
      t.preventDefault();
    },
    startTicking: function startTicking() {
      if (!this._frameQueued) {
        this._frameQueued = requestAnimationFrame(this.tick.bind(this));
      }
    },
    tick: function tick() {
      if (!this.ready) {
        return;
      }

      var t = this.pos;
      var e = this._keyState;
      var i = this.opts.gravity;

      if (e.left) {
        t.xv -= this.opts.speed;
      }

      if (e.right) {
        t.xv += this.opts.speed;
      }

      if (i == 0) {
        if (e.up) {
          t.yv -= this.opts.speed;
        }

        if (e.down) {
          t.yv += this.opts.speed;
        }
      } else {
        if (e.up && !e.lastUp) {
          this.pos.yv = this.opts.jumpForce;
        }
      }

      e.lastUp = e.up;
      var s = .1;
      var a = Math.abs(t.xv) > s || Math.abs(t.yv) > s;
      var l = 5;

      if (a) {
        this._updateCollision();

        if (this._collisions.left != null) {
          if (t.xv < -s && t.xv < -this._collisions.left && this._collisions.leftTop < l && t.yv > -this._collisions.leftTop) {
            t.yv = -i - 3 - (this._collisions.up == null ? this._collisions.leftTop : Math.min(this._collisions.up, this._collisions.leftTop));
          }

          t.xv = Math.max(t.xv, -this._collisions.left);
        }

        if (this._collisions.right != null) {
          if (t.xv > s && t.xv > this._collisions.right && this._collisions.rightTop < l && t.yv > -this._collisions.rightTop) {
            t.yv = -i - 3 - (this._collisions.up == null ? this._collisions.rightTop : Math.min(this._collisions.up, this._collisions.rightTop));
          }

          t.xv = Math.min(t.xv, this._collisions.right);
        }

        if (this._collisions.up != null) {
          t.yv = Math.max(t.yv, -this._collisions.up);
        }

        if (this._collisions.down != null) {
          t.yv = Math.min(t.yv, this._collisions.down);
        }
      }

      t.x += t.xv;
      t.y += t.yv;
      t.xv *= 1 - this.opts.drag;

      if (i == 0) {
        t.yv *= 1 - this.opts.drag;
      }

      t.xv = Math.min(t.xv, this.opts.maxSpeed);
      t.yv = Math.min(t.yv, this.opts.maxSpeed);

      if (i != 0 && this._collisions.down != 0) {
        t.yv += i;
        a = true;
      }

      var o = this.opts.character.width / 2;
      t.x = Math.max(this.opts.leftEdge + o, Math.min(this.opts.rightEdge - o, t.x));
      t.dir = t.xv / Math.abs(t.xv);
      var r = false;

      if (this.opts.onTick) {
        r = this.opts.onTick(this);
      }

      if (!a && !r) {
        t.x = Math.round(t.x);
        t.y = Math.round(t.y);
        t.xv *= 0;
        t.yv *= 0;
        this._frameQueued = false;
      } else {
        requestAnimationFrame(this.tick.bind(this));
      }

      this.frame();
    },
    frame: function frame() {
      var t = this.pos;
      var i = this.tigl.box;
      var s = i.width / 2;
      var a = i.height / 2;
      var l = t.x - s;
      var o = t.x + s;
      var r = t.y - a;
      var n = t.y + a;
      var h = Math.min(this.opts.rightEdge - i.width, Math.max(this.opts.leftEdge, l));
      var d = l - h;
      this.tigl.pos.x = l - d;
      this.tigl.pos.y = r;
      this.tigl.frame();
      this.charEl.style.marginLeft = d + "px";
      var v = this.objectEls;
      var c = this.opts.objectSize;

      for (var f = 0; f < this.objects.length; f++) {
        var p = this.objects[f];
        var u = e(p.x1, p.y1, p.x2, p.y2, l, r, o, n);

        if (!p.got && u) {
          if (v[f] == null) {
            var y = document.createElement("div");
            y.style.position = "absolute";
            y.style.top = 0;
            y.style.left = 0;
            y.style.width = p.w + "px";
            y.style.height = p.h + "px";
            y.style.backgroundImage = p.backgroundImage;
            y.style.backgroundRepeat = "no-repeat";
            this.el.appendChild(y);
            this.objectEls[f] = y;
          }

          this.objectEls[f].style.transform = "translate3d(" + (p.x1 - l + d) + "px, " + (p.y1 - r) + "px, 0)";
        } else {
          if (v[f] != null) {
            this.el.removeChild(v[f]);
            delete v[f];
          }
        }
      }
    },
    onMouseMove: function onMouseMove(t) {
      if (!this.opts.onMouseMove) {
        return;
      }

      var e = this.pos.x + t.clientX - this.el.offsetLeft - this.el.offsetWidth / 2;
      var i = this.pos.y + t.clientY - this.el.offsetTop - this.el.offsetHeight / 2;
      this.opts.onMouseMove(e, i, t);
    }
  };

  window.helloWorld = function (i) {
    var a = .3;
    var l = [];

    if (typeof t != "undefined") {
      for (var o = 0; o < t.length; o++) {
        l.push({
          x: t[o][0],
          y: t[o][1],
          w: 25,
          h: 25,
          backgroundImage: "url(" + i("coin.png") + ")"
        });
      }
    }

    var r = new s(document.getElementById("explore"), {
      debug: false,
      startPos: {
        x: 512106,
        y: -549612
      },
      speed: .85,
      jumpForce: -10,
      gravity: a,
      drag: .15,
      maxSpeed: 20,
      leftEdge: 475136,
      rightEdge: 567295,
      character: {
        width: 29,
        height: 59,
        x1Margin: 0,
        y1Margin: 6,
        x2Margin: 0,
        y2Margin: 1
      },
      objects: l,
      tigl: {
        debug: false,
        key: function key(t, e) {
          return t + ":" + e;
        },
        url: function url(t) {
          return i(t + "+s.png");
        },
        size: 513,
        overlap: 1,
        preloadDistance: 1024,
        tileCacheSize: 1024
      },
      onTick: w
    });

    function n(t, e, s, a) {
      if (a == -1082 && s <= 927) {
        t.src = i("left-horizon.png");
        return t;
      }

      if (a == -1074 && s >= 1108) {
        t.src = i("right-horizon.png");
        return t;
      }

      var l = document.createElement("div");
      var o = false;

      if (a > -1074) {
        o = true;
      }

      l.style.background = o ? "black" : "white";

      if (o) {
        l.style.outline = "4px solid black";
        l.style.zIndex = 10;
        l.setAttribute("data-collide", "");
      }

      return l;
    }

    var h = "position: absolute; left: 0; right: 0; font-family: xkcd-Regular; font-weight: normal; text-align: center; z-index: 9999";
    var d = document.createElement("h1");
    d.setAttribute("style", "bottom: 46px; color: white; font-size: 24px; opacity: .75; " + h);
    d.textContent = "use the arrow keys to move";
    r.el.appendChild(d);

    if (window.DeviceOrientationEvent) {
      window.addEventListener("deviceorientation", function (t) {
        if (!t.gamma) {
          return;
        }

        d.textContent = "tilt to move, tap to jump";
      }, false);
    }

    var v = document.createElement("h1");
    v.setAttribute("style", "bottom: 20px; color: red; font-size: 40px; " + h);
    v.textContent = "RETURN TO THE PLAY AREA";
    v.style.display = "none";
    var c = document.createElement("h1");
    c.setAttribute("style", "bottom: 46px; color: #eed000; font-size: 34px; " + h);
    var f = document.createElement("h1");
    f.setAttribute("style", "bottom: 20px; color: #eed000; font-size: 26px; " + h);
    r.charEl.style.backgroundImage = "url(" + i("all-four.png") + ")";
    r.charEl.style.backgroundRepeat = "no-repeat";
    r.charEl.style.transition = "transform .15s ease-out";
    var p = {
      x1: 511484,
      y1: -550619,
      x2: 513026,
      y2: -549568
    };
    var u = {
      x1: 512257,
      y1: -549650,
      x2: 512309,
      y2: -549584
    };
    var y = Date.now();
    var g = false;
    var x = null;
    var m = null;
    var b = null;

    function w(s) {
      var l = false;
      var o = s.pos;
      var r = s.charEl;
      s.opts.disableCollision = !!window.noclip;
      s.opts.gravity = !!window.mewtwo ? 0 : a;

      if (!!window.i.am.gandalf) {
        s.opts.jumpForce = -20;
        s.opts.speed = 2;

        if (!b) {
          console.log("hat");
          b = document.createElement("div");
          b.style.position = "absolute";
          b.style.width = "27px";
          b.style.height = "29px";
          b.style.background = "url(" + i("wizard-hat.png") + ")";
          b.style.zIndex = 100;
          r.appendChild(b);
        } else {
          b.style.top = "-18px";
          b.style.left = "1px";
        }
      }

      if (o.dir < 0) {
        r.style.transform = "rotateY(180deg) translateZ(0)";
      } else {
        r.style.transform = "translateZ(0)";
      }

      if (o.yv < -.25) {
        r.style.backgroundPosition = "-29px 0";

        if (b) {
          b.style.top = "-20px";
          b.style.left = "1px";
        }
      } else if (o.yv > .25) {
        r.style.backgroundPosition = "-87px 0";

        if (b) {
          b.style.top = "-14px";
          b.style.left = "3px";
        }
      } else if (Math.abs(o.xv) > .25) {
        r.style.backgroundPosition = "-58px 0";

        if (b) {
          b.style.top = "-18px";
          b.style.left = "2px";
        }
      } else {
        r.style.backgroundPosition = "0 0";
      }

      if (Math.abs(o.xv) > 0 && d.parentNode) {
        s.el.removeChild(d);
      }

      var n = s.opts.character.width / 2;
      var h = s.opts.character.height / 2;
      var w = {
        x1: o.x - n,
        x2: o.x + n,
        y1: o.y - h,
        y2: o.y + h
      };
      var M = e(w.x1, w.y1, w.x2, w.y2, p.x1, p.y1, p.x2, p.y2);
      var k = Date.now();

      if (!M) {
        if (m == null) {
          s.el.appendChild(v);
          m = k;
        }
      } else {
        m = null;
      }

      var E = (k - m) / 1e3;
      var C = false;

      if (m != null && E < 5 * 2.5) {
        var _ = E % 2.5;

        if (_ < 1.5) {
          C = _ % .5 < .25;
        }

        l = true;
      }

      v.style.display = C ? "block" : "none";
      var T = e(w.x1, w.y1, w.x2, w.y2, u.x1, u.y1, u.x2, u.y2);

      if (T && !g) {
        var L = 0;

        for (var I = 0; I < s.objects.length; I++) {
          var S = s.objects[I];

          if (S.got) {
            L++;
            S.got = false;
          }
        }

        var z = Math.round((k - y) / 1e3);
        var j = L == 1 ? "A SINGLE COIN" : String(L) + " COINS";
        c.textContent = "YOU GOT " + j + " IN " + z + " SECOND" + (z == 1 ? "" : "S");
        var A;

        if (L == 0) {
          A = "you successfully avoided all the coins!";
        } else if (L == 1) {
          A = "it's a start.";
        } else if (L < 5) {
          A = "not bad!";
        } else if (L < 10) {
          A = "terrific!";
        } else if (L == 17) {
          A = "you found all the coins! great job!";
        } else if (L == 42) {
          A = "no answers here.";
        } else if (L == t.length) {
          A = "are you gandalf?";
        }

        f.textContent = A;
        s.el.appendChild(c);
        s.el.appendChild(f);
        clearTimeout(x);
        x = setTimeout(function () {
          s.el.removeChild(c);
          s.el.removeChild(f);
        }, 3e3);
        new Image().src = "//xkcd.com/events.gif?coins=" + L + "&seconds=" + z;
        y = k;
      }

      g = T;
      return l;
    }

    window.i = {
      am: {}
    };
    window.ze = {
      goggles: function goggles() {
        r.opts.debug = true;

        r._updateCollision();

        document.body.appendChild(r.canvas);
        r.canvas.style.position = "fixed";
        r.canvas.style.right = 0;
        r.canvas.style.bottom = 0;
        r.canvas.style.width = "250px";
        r.canvas.style.imageRendering = "pixelated";
        console.info("B-)");
      }
    };
    window.explorer = r;
    console.log("what? hoverboard not enough for you!?");
    r.el.focus();
    var M = ["all-four.png", "coin.png"];

    for (var k = 0; k < M.length; k++) {
      new Image().src = i(M[k]);
    }
  };
})();